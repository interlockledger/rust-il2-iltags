/*
 * BSD 3-Clause License
 *
 * Copyright (c) 2020, InterlockLedger Network
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//! This module implements the IO abstraction used by this library.
//!
//! It contain traits that define the expected interface used by
pub mod array;
pub mod data;

#[cfg(test)]
mod tests;

pub use array::*;

/// Types of erros generated by this module.
pub enum ErrorKind {
    /// Unable to read data.
    UnableToReadData,
    /// Unable to write data.
    UnableToWriteData,
    /// The data is corrupted.
    CorruptedData,
    /// Wrapper to standard `std::io::Error`.
    IOError(std::io::Error),
    /// Wrapper to a boxed error `std::error::Error`.
    BoxedError(Box<dyn std::error::Error>),
}

/// A specialized `Result` for operations of this module.
pub type Result<T> = std::result::Result<T, ErrorKind>;

/// The Reader trait is allows the extraction of bytes from the source.
///
/// It differs from most IO library as it defines all operations as
/// all-or-nothing operations. No partial reads are allowed.
///
/// It is very important to notice that implementations of this
/// trait are not required to be thread safe.
pub trait Reader {
    /// Reads a single byte from the source.
    ///
    /// Returns:
    ///     - Ok(v): The value read;
    ///     - Err(ErrorKind): In case of error;
    fn read(&mut self) -> Result<u8>;

    /// Reads some bytes from the source.
    ///
    /// Arguments:
    ///     - `buff`: The output buffer;
    ///
    /// Returns:
    ///     - Ok(()): The value read;
    ///     - Err(ErrorKind): In case of error;
    fn read_all(&mut self, buff: &mut [u8]) -> Result<()> {
        for b in buff {
            *b = self.read()?;
        }
        Ok(())
    }

    /// Skips some bytes.
    ///
    /// The default implementation just calls read() repeatedly,
    /// so each implementation is advised to provide a better
    /// implementation if possible.
    ///
    /// Arguments:
    ///     - `count`: Number of byte to skip;
    ///
    /// Returns:
    ///     - Ok(()): The value read;
    ///     - Err(ErrorKind): In case of error;
    fn skip(&mut self, count: usize) -> Result<()> {
        for _i in 0..count {
            self.read()?;
        }
        Ok(())
    }
}

/// The Writer trait allows the addition of bytes into the destination.
///
/// It differs from most IO library as it defines all operations as
/// all-or-nothing operations. No partial writes are allowed.
///
/// It is very important to notice that implementations of this
/// trait are not required to be thread safe.
pub trait Writer {
    fn write(&mut self, value: u8) -> Result<()>;

    fn write_all(&mut self, buff: &[u8]) -> Result<()> {
        for b in buff {
            self.write(*b)?;
        }
        Ok(())
    }
}

/// LimitedReader implements a [`Reader`] that wraps another reader
/// but defines a limited to the amount of bytes that can be
/// extracted from the inner Reader.
///
/// It is important to notice that LimitedReader will test the
/// limits prior to the attempt to read the data.
///
/// [`Reader`]: trait.Reader.html
pub struct LimitedReader<'a> {
    source: &'a mut dyn Reader,
    available: usize,
}

impl<'a> LimitedReader<'a> {
    /// Creates a new instance of this struct.
    ///
    /// Parameters:
    ///     - src: A mutable reference to the source Reader.
    ///     - available: Number of bytes available for reading.
    pub fn new(src: &'a mut dyn Reader, available: usize) -> LimitedReader {
        LimitedReader {
            source: src,
            available,
        }
    }

    /// Verifies if it is possible to extract a given number of bytes
    /// from the source.
    ///
    /// Parameters:
    ///     - size: The number of bytes to read.
    ///
    /// Returns:
    ///     - Ok(()): If the given number of bytes is available.
    ///     - Err(ErrorKind::UnableToReadData): If the specified number of
    ///     bytes is not available.
    pub fn can_read(&mut self, size: usize) -> Result<()> {
        if size < self.available {
            Ok(())
        } else {
            Err(ErrorKind::UnableToReadData)
        }
    }

    /// Returns the number of available bytes.
    pub fn available(&self) -> usize {
        self.available
    }

    /// Skips the required number of bytes
    ///
    /// Returns:
    ///     - Ok(()): If the given number of bytes is available.
    ///     - Err(ErrorKind::UnableToReadData): If the specified number of
    ///     bytes is not available.
    pub fn goto_end(&mut self) -> Result<()> {
        if self.available > 0 {
            let ret = self.source.skip(self.available);
            if ret.is_ok() {
                self.available = 0;
            }
            ret
        } else {
            Ok(())
        }
    }
}

impl<'a> Reader for LimitedReader<'a> {
    fn read(&mut self) -> Result<u8> {
        self.can_read(1)?;
        let ret = self.source.read();
        if ret.is_ok() {
            self.available -= 1;
        }
        ret
    }

    fn read_all(&mut self, buff: &mut [u8]) -> Result<()> {
        self.can_read(buff.len())?;
        let ret = self.source.read_all(buff);
        if ret.is_ok() {
            self.available -= buff.len();
        }
        ret
    }
}

/// This struct implements a [`Reader`] that uses a
/// std::io::Read as the source of bytes.
///
/// [`Reader`]: trait.Reader.html
pub struct ReadReader<'a, T: std::io::Read> {
    source: &'a mut T,
}

impl<'a, T: std::io::Read> ReadReader<'a, T> {
    /// Creates a new instance of ReadReader.
    ///
    /// Parameters:
    ///     - `src`: The source `Read`.
    pub fn new(src: &'a mut T) -> ReadReader<'a, T> {
        ReadReader { source: src }
    }
}

impl<'a, T: std::io::Read> Reader for ReadReader<'a, T> {
    fn read(&mut self) -> Result<u8> {
        let mut buff: [u8; 1] = [0; 1];
        match self.source.read_exact(&mut buff) {
            Ok(()) => Ok(buff[0]),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }

    fn read_all(&mut self, buff: &mut [u8]) -> Result<()> {
        match self.source.read_exact(buff) {
            Ok(()) => Ok(()),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }
}

/// This struct implements a [`Reader`] that uses a
/// std::io::Read + std::io::Seek as the source of bytes.
///
/// [`Reader`]: trait.Reader.html
pub struct ReadSeekReader<'a, T: std::io::Read + std::io::Seek> {
    source: &'a mut T,
}

impl<'a, T: std::io::Read + std::io::Seek> ReadSeekReader<'a, T> {
    /// Creates a new instance of ReadReader.
    ///
    /// Parameters:
    ///     - `src`: The source `Read`.
    pub fn new(src: &'a mut T) -> ReadSeekReader<'a, T> {
        ReadSeekReader { source: src }
    }
}

impl<'a, T: std::io::Read + std::io::Seek> Reader for ReadSeekReader<'a, T> {
    fn read(&mut self) -> Result<u8> {
        let mut buff: [u8; 1] = [0; 1];
        match self.source.read_exact(&mut buff) {
            Ok(()) => Ok(buff[0]),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }

    fn read_all(&mut self, buff: &mut [u8]) -> Result<()> {
        match self.source.read_exact(buff) {
            Ok(()) => Ok(()),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }

    fn skip(&mut self, count: usize) -> Result<()> {
        match self.source.seek(std::io::SeekFrom::Current(count as i64)) {
            Ok(_) => Ok(()),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }
}

/// This struct implements a [`Writer`] that uses a
/// `std::io::Write` as the destination of bytes.
///
/// [`Writer`]: trait.Writer.html
pub struct WriteWriter<'a> {
    dest: &'a mut dyn std::io::Write,
}

impl<'a> WriteWriter<'a> {
    pub fn new(dst: &'a mut dyn std::io::Write) -> WriteWriter<'a> {
        WriteWriter { dest: dst }
    }
}

impl<'a> Writer for WriteWriter<'a> {
    fn write(&mut self, value: u8) -> Result<()> {
        let tmp: [u8; 1] = [value];
        match self.dest.write(&tmp) {
            Ok(1) => Ok(()),
            Ok(_) => Err(ErrorKind::UnableToWriteData),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }

    fn write_all(&mut self, buff: &[u8]) -> Result<()> {
        match self.dest.write(&buff) {
            Ok(n) if n == buff.len() => Ok(()),
            Ok(_) => Err(ErrorKind::UnableToWriteData),
            Err(e) => Err(ErrorKind::IOError(e)),
        }
    }
}
